import json
import os


def split_data(data, percent_train, percent_valid, folder_out):
    data_test = []
    data_train = []
    data_valid = []
    num_vul, num_non_vul, total, data_vul, data_non_vul = count_data(data)

    num_vul_train = int((percent_train / 100) * num_vul)
    num_non_vul_train = int((percent_train / 100) * num_non_vul)

    print(f'Total data vulnerability sample train : {num_vul_train} / {num_vul}')
    print(f'Total data non vulnerability sample train: {num_non_vul_train} / {num_non_vul}')

    num_vul_valid = int((percent_valid / 100) * num_vul)
    num_non_vul_valid = int((percent_valid / 100) * num_non_vul)

    print(f'Total data vulnerability sample valid : {num_vul_valid} / {num_vul}')
    print(f'Total data non vulnerability sample valid : {num_non_vul_valid} / {num_non_vul}')

    num_vul_test = num_vul - (num_vul_train + num_vul_valid)
    num_non_vul_test = num_non_vul - (num_non_vul_train + num_non_vul_valid)

    print(f'Total data vulnerability sample test : {num_vul_test} / {num_vul}')
    print(f'Total data non vulnerability sample test : {num_non_vul_test} / {num_non_vul}')

    data_train.extend(data_vul[:num_vul_train])
    data_train.extend(data_non_vul[:num_non_vul_train])

    data_valid.extend(data_vul[num_vul_train: num_non_vul_train + num_vul_valid])
    data_valid.extend(data_non_vul[num_non_vul_train: num_non_vul_train + num_non_vul_valid])

    data_test.extend(data_vul[num_non_vul_train + num_vul_valid:])
    data_test.extend(data_non_vul[num_non_vul_train + num_non_vul_valid:])

    file_name = os.path.join(folder_out, 'data_input' + str(percent_train) + '-' + str(percent_valid))
    os.mkdir(file_name)
    for name, value in zip(['train', 'test', 'valid'], [data_train, data_test, data_valid]):
        file_data = os.path.join(file_name, name + '.json')
        print("Dumping file data input in ", file_data)
        with open(file_data, 'w') as f:
            json.dump(value, f)
            f.close()
    pass


def count_data(data):
    data_vul = []
    data_non_vul = []

    for element in data:
        target = element['target']
        if target == [1]:
            data_vul.append(element)
        else:
            data_non_vul.append(element)
    return len(data_vul), len(data_non_vul), len(data_vul) + len(data_non_vul), data_vul, data_non_vul


if __name__ == '__main__':
    file_json = "..\\data_graph_full.json"
    out_put_path = '..\\data_split'
    data = json.load(open(file_json))
    split_data(data, 65, 20, out_put_path)
