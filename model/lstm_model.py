import torch.nn as nn
import torch


class LstmModel(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim=2):
        super(LstmModel, self).__init__()
        self.hidden_dim = hidden_dim
        self.lstm = nn.LSTM(input_dim, hidden_dim)

        self.classifier = nn.Sequential(
            nn.Linear(in_features=self.hidden_dim, out_features=2),
            nn.LogSoftmax(dim=-1)
        )

    def forward(self, example_batch, targets=None):

        lstm, _ = self.lstm(example_batch.view(len(example_batch), 1, -1))
        lstm = lstm.view(len(example_batch), -1)
        y_a = self.classifier(lstm)

        probs = torch.softmax(y_a, dim=1)

        batch_loss = None
        if targets is not None:
            loss_function = nn.CrossEntropyLoss()
            batch_loss = loss_function(y_a, targets)

        return probs, y_a, batch_loss

    def extract_feature(self, x):
        out = self.lstm(x)
        return out
